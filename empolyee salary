#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Employee {
protected:
    string name;
    double salary;
public:
    Employee(string n, double s) : name(n), salary(s) {}
    virtual double calculatePay() const = 0;
    virtual void printPayroll() const = 0;
};

class HourlyEmployee : public Employee {
private:
    double hoursWorked;
    double hourlyRate;
public:
    HourlyEmployee(string n, double s, double h, double r) : Employee(n, s), hoursWorked(h), hourlyRate(r) {}
    double calculatePay() const override {
        if (hoursWorked <= 40)
            return hoursWorked * hourlyRate;
        else
            return 40 * hourlyRate + (hoursWorked - 40) * hourlyRate * 1.5;
    }
    void printPayroll() const override {
        cout << "Name: " << name << ", Pay: $" << calculatePay() << endl;
    }
};

class SalariedEmployee : public Employee {
private:
    double bonus;
public:
    SalariedEmployee(string n, double s, double b) : Employee(n, s), bonus(b) {}
    double calculatePay() const override {
        return salary + bonus;
    }
    void printPayroll() const override {
        cout << "Name: " << name << ", Pay: $" << calculatePay() << endl;
    }
};

int main() {
    vector<Employee*> employees;
    employees.push_back(new HourlyEmployee("John", 10, 45, 20));
    employees.push_back(new SalariedEmployee("Alice", 5000, 1000));

    cout << "Payroll Report:" << endl;
    for (const auto& emp : employees) {
        emp->printPayroll();
    }

    for (auto emp : employees) {
        delete emp;
    }

    return 0;
}




output;

Payroll Report:
Name: John, Pay: $950
Name: Alice, Pay: $6000


=== Code Execution Successful ===







